[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "picodi-app"
description = "Just example of using Picodi with FastAPI"
version = "0.1.0"
license = "MIT"
authors = [
  "yakimka"
]

readme = "README.md"

repository = "https://github.com/yakimka/picodi-fastapi-example"

keywords = []

classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
]

[tool.poetry.dependencies]
python = "^3.10"
picodi = "^0.28.2"
fastapi = "^0.111.0"
uvicorn = "^0.30.1"
httpx = "^0.27.0"
pydantic-settings = "^2.3.3"
redis = "^5.0.7"

[tool.poetry.group.dev.dependencies]
mypy = "^1.10.0"
pre-commit = "^3.7.1"
pytest = "^8.2.2"
pytest-asyncio = "^0.23.7"
pytest-cov = "^5.0.0"
pytest-deadfixtures = "^2.2.1"
pytest-randomly = "^3.12"
pytest-recording = "^0.13.1"

[tool.isort]
# isort configuration:
# https://github.com/timothycrosley/isort/wiki/isort-Settings
profile = "black"
include_trailing_comma = true
use_parentheses = true
# See https://github.com/timothycrosley/isort#multi-line-output-modes
multi_line_output = 3
line_length = "88"

[tool.black]
line-length = "88"

[tool.pytest.ini_options]
pythonpath = "."
markers = [
    "integration: mark a test as an test that need external resources (databases, services, etc.)",
]
# Directories that are not visited by pytest collector:
norecursedirs = [
  "*.egg",
  ".eggs",
  "dist",
  "build",
  "docs",
  ".tox",
  ".git",
  "__pycache__",
  ".cache",
  ".venv",
  "venv",
  ".pre-commit",
]

# Strict `@xfail` by default:
xfail_strict = true

# pytest-asyncio
asyncio_mode = "auto"

# Extra options:
addopts = [
  # don't add --cov because it breaks pycharm debugger
  #   just add it manaually when needed to cmd args
  "--import-mode=importlib",
  "--strict-markers",
  "--strict-config",
  "--tb=short",
  "--cov-report=term-missing",
#  "--cov-fail-under=100",
#  --record-mode=once  # for vcrpy
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
precision = 2
exclude_lines = [
  "if TYPE_CHECKING:",
]

[tool.mypy]
files = ["."]
exclude = ["tests/"]
##
plugins = ["pydantic.mypy"]
##
# mypy configurations: https://mypy.readthedocs.io/en/latest/config_file.html
allow_redefinition = false
check_untyped_defs = true
disallow_any_explicit = false
disallow_any_generics = false
disallow_incomplete_defs = true
disallow_untyped_calls = 'true'
disallow_untyped_decorators = 'true'
disallow_untyped_defs = 'true'
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = false
local_partial_types = true
no_implicit_optional = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
